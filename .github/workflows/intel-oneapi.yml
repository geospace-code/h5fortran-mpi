name: intel-oneapi

env:
  CC: icx
  CXX: icpx
  FC: ifx

on:
  push:
    paths:
      - "**.c"
      - "**.cpp"
      - "**.f90"
      - "**.F90"
      - "**.cmake"
      - "**/CMakeLists.txt"
      - ".github/workflows/intel-oneapi.yml"
      - "!memcheck.cmake"
      - "!coverage.cmake"


jobs:

  linux:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Python pkgs
      run: pip install numpy h5py

    - name: Intel Apt repository
      timeout-minutes: 1
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update

    - name: Install Intel oneAPI
      timeout-minutes: 10
      run: sudo apt-get install intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic intel-oneapi-mpi intel-oneapi-mpi-devel

    - name: Install tools
      timeout-minutes: 2
      run: sudo apt install hdf5-tools ninja-build

    - name: Setup Intel oneAPI environment
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - uses: actions/checkout@v3

    - name: Configure HDF5
      run: >-
        cmake
        -GNinja
        -S scripts -B scripts/build
        --install-prefix ${{ runner.temp }}

    - name: Build/install HDF5
      run: cmake --build scripts/build

    - name: Configure h5fortran
      run: >-
        cmake
        --preset multi
        --install-prefix ${{ runner.temp }}
        -DCMAKE_PREFIX_PATH=${{ runner.temp }}
        -DCMAKE_COMPILE_WARNING_AS_ERROR:BOOL=false
# bug fixed in CMake 3.24.3 -- Fortran errors not supported for oneAPI

    - name: print config log
      if: ${{ failure() }}
      run: cat build/CMakeFiles/CMakeError.log

    - name: Release build
      run: cmake --build --preset release

    - name: Release unit test
      run: ctest --preset release

    - name: debug build
      run: cmake --build --preset debug

    - name: debug unit test
      run: ctest --preset debug

    - name: install package
      run: cmake --install build

    - name: example config
      run: >-
        cmake
        --preset default
        -GNinja
        -DCMAKE_PREFIX_PATH=${{ runner.temp }}
      working-directory: example

    - name: example build
      run: cmake --build --preset default
      working-directory: example

    - name: example test
      run: ctest --preset default
      working-directory: example
